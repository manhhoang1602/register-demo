{"ast":null,"code":"import _slicedToArray from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\n/**\n * Returns a stateful value, and a set of memoized functions to toggle it,\n * set it to true and set it to false\n */\n\nfunction useToggle(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setState = _useState2[1];\n\n  return {\n    value: value,\n    toggle: useCallback(function () {\n      return setState(function (state) {\n        return !state;\n      });\n    }, []),\n    setTrue: useCallback(function () {\n      return setState(true);\n    }, []),\n    setFalse: useCallback(function () {\n      return setState(false);\n    }, [])\n  };\n}\n\nexport { useToggle };","map":{"version":3,"sources":["/home/hoangdev/Desktop/front.test/node_modules/@shopify/polaris/dist/esm/utilities/use-toggle.js"],"names":["useCallback","useState","useToggle","initialState","value","setState","toggle","state","setTrue","setFalse"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,CAAmBC,YAAnB,EAAiC;AAAA,kBACLF,QAAQ,CAACE,YAAD,CADH;AAAA;AAAA,MACxBC,KADwB;AAAA,MACjBC,QADiB;;AAE/B,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,MAAM,EAAEN,WAAW,CAAC;AAAA,aAAMK,QAAQ,CAAC,UAAAE,KAAK;AAAA,eAAI,CAACA,KAAL;AAAA,OAAN,CAAd;AAAA,KAAD,EAAkC,EAAlC,CAFd;AAGLC,IAAAA,OAAO,EAAER,WAAW,CAAC;AAAA,aAAMK,QAAQ,CAAC,IAAD,CAAd;AAAA,KAAD,EAAuB,EAAvB,CAHf;AAILI,IAAAA,QAAQ,EAAET,WAAW,CAAC;AAAA,aAAMK,QAAQ,CAAC,KAAD,CAAd;AAAA,KAAD,EAAwB,EAAxB;AAJhB,GAAP;AAMD;;AAED,SAASH,SAAT","sourcesContent":["import { useCallback, useState } from 'react';\n\n/**\n * Returns a stateful value, and a set of memoized functions to toggle it,\n * set it to true and set it to false\n */\n\nfunction useToggle(initialState) {\n  const [value, setState] = useState(initialState);\n  return {\n    value,\n    toggle: useCallback(() => setState(state => !state), []),\n    setTrue: useCallback(() => setState(true), []),\n    setFalse: useCallback(() => setState(false), [])\n  };\n}\n\nexport { useToggle };\n"]},"metadata":{},"sourceType":"module"}