{"ast":null,"code":"import _toConsumableArray from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nvar SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    selectedResources: [],\n    allResourcesSelected: false,\n    resourceIDResolver: defaultResourceIDResolver\n  },\n      _ref$selectedResource = _ref.selectedResources,\n      initSelectedResources = _ref$selectedResource === void 0 ? [] : _ref$selectedResource,\n      _ref$allResourcesSele = _ref.allResourcesSelected,\n      initAllResourcesSelected = _ref$allResourcesSele === void 0 ? false : _ref$allResourcesSele,\n      _ref$resourceIDResolv = _ref.resourceIDResolver,\n      resourceIDResolver = _ref$resourceIDResolv === void 0 ? defaultResourceIDResolver : _ref$resourceIDResolv;\n\n  var _useState = useState(initSelectedResources),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedResources = _useState2[0],\n      setSelectedResources = _useState2[1];\n\n  var _useState3 = useState(initAllResourcesSelected),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allResourcesSelected = _useState4[0],\n      setAllResourcesSelected = _useState4[1];\n\n  var handleSelectionChange = useCallback(function (selectionType, isSelecting, selection) {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(function (newSelectedResources) {\n          return isSelecting ? [].concat(_toConsumableArray(newSelectedResources), [selection]) : newSelectedResources.filter(function (id) {\n            return id !== selection;\n          });\n        });\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(function (newSelectedResources) {\n          var ids = [];\n\n          for (var i = selection[0]; i <= selection[1]; i++) {\n            var id = resourceIDResolver(resources[i]);\n\n            if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n              ids.push(id);\n            }\n          }\n\n          return isSelecting ? [].concat(_toConsumableArray(newSelectedResources), ids) : newSelectedResources.filter(function (id) {\n            return !ids.includes(id);\n          });\n        });\n        break;\n    }\n  }, [allResourcesSelected, resources, resourceIDResolver]);\n  return {\n    selectedResources: selectedResources,\n    allResourcesSelected: allResourcesSelected,\n    handleSelectionChange: handleSelectionChange\n  };\n}\n\nexport { SelectionType, useIndexResourceState };","map":{"version":3,"sources":["/home/hoangdev/Desktop/front.test/node_modules/@shopify/polaris/dist/esm/utilities/use-index-resource-state.js"],"names":["useState","useCallback","SelectionType","defaultResourceIDResolver","resource","id","Error","useIndexResourceState","resources","selectedResources","allResourcesSelected","resourceIDResolver","initSelectedResources","initAllResourcesSelected","setSelectedResources","setAllResourcesSelected","handleSelectionChange","selectionType","isSelecting","selection","All","Single","newSelectedResources","filter","Page","map","Multi","ids","i","includes","push"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nlet SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources, {\n  selectedResources: initSelectedResources = [],\n  allResourcesSelected: initAllResourcesSelected = false,\n  resourceIDResolver = defaultResourceIDResolver\n} = {\n  selectedResources: [],\n  allResourcesSelected: false,\n  resourceIDResolver: defaultResourceIDResolver\n}) {\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            const id = resourceIDResolver(resources[i]);\n\n            if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n              ids.push(id);\n            }\n          }\n\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resources, resourceIDResolver]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange\n  };\n}\n\nexport { SelectionType, useIndexResourceState };\n"]},"metadata":{},"sourceType":"module"}