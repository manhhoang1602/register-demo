{"ast":null,"code":"import _slicedToArray from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React$1, { useState, useCallback, useEffect } from 'react';\nimport debounce$1 from 'lodash/debounce';\nimport { MediaQueryContext } from '../../utilities/media-query/context.js';\nimport { navigationBarCollapsed } from '../../utilities/breakpoints.js';\nimport { EventListener as EventListener$1 } from '../EventListener/EventListener.js';\n\nvar MediaQueryProvider = function MediaQueryProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(navigationBarCollapsed().matches),\n      _useState2 = _slicedToArray(_useState, 2),\n      isNavigationCollapsed = _useState2[0],\n      setIsNavigationCollapsed = _useState2[1]; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var handleResize = useCallback(debounce$1(function () {\n    if (isNavigationCollapsed !== navigationBarCollapsed().matches) {\n      setIsNavigationCollapsed(!isNavigationCollapsed);\n    }\n  }, 40, {\n    trailing: true,\n    leading: true,\n    maxWait: 40\n  }), [isNavigationCollapsed]);\n  useEffect(function () {\n    setIsNavigationCollapsed(navigationBarCollapsed().matches);\n  }, []);\n  return /*#__PURE__*/React$1.createElement(MediaQueryContext.Provider, {\n    value: {\n      isNavigationCollapsed: isNavigationCollapsed\n    }\n  }, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"resize\",\n    handler: handleResize\n  }), children);\n};\n\nexport { MediaQueryProvider };","map":{"version":3,"sources":["/home/hoangdev/Desktop/front.test/node_modules/@shopify/polaris/dist/esm/components/MediaQueryProvider/MediaQueryProvider.js"],"names":["React$1","useState","useCallback","useEffect","debounce$1","MediaQueryContext","navigationBarCollapsed","EventListener","EventListener$1","MediaQueryProvider","children","matches","isNavigationCollapsed","setIsNavigationCollapsed","handleResize","trailing","leading","maxWait","createElement","Provider","value","event","handler"],"mappings":";AAAA,OAAOA,OAAP,IAAkBC,QAAlB,EAA4BC,WAA5B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,aAAa,IAAIC,eAA1B,QAAiD,mCAAjD;;AAEA,IAAMC,kBAAkB,GAAG,SAASA,kBAAT,OAExB;AAAA,MADDC,QACC,QADDA,QACC;;AAAA,kBACyDT,QAAQ,CAACK,sBAAsB,GAAGK,OAA1B,CADjE;AAAA;AAAA,MACMC,qBADN;AAAA,MAC6BC,wBAD7B,kBACqG;;;AAEtG,MAAMC,YAAY,GAAGZ,WAAW,CAACE,UAAU,CAAC,YAAM;AAChD,QAAIQ,qBAAqB,KAAKN,sBAAsB,GAAGK,OAAvD,EAAgE;AAC9DE,MAAAA,wBAAwB,CAAC,CAACD,qBAAF,CAAxB;AACD;AACF,GAJ0C,EAIxC,EAJwC,EAIpC;AACLG,IAAAA,QAAQ,EAAE,IADL;AAELC,IAAAA,OAAO,EAAE,IAFJ;AAGLC,IAAAA,OAAO,EAAE;AAHJ,GAJoC,CAAX,EAQ5B,CAACL,qBAAD,CAR4B,CAAhC;AASAT,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,wBAAwB,CAACP,sBAAsB,GAAGK,OAA1B,CAAxB;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO,aAAaX,OAAO,CAACkB,aAAR,CAAsBb,iBAAiB,CAACc,QAAxC,EAAkD;AACpEC,IAAAA,KAAK,EAAE;AACLR,MAAAA,qBAAqB,EAArBA;AADK;AAD6D,GAAlD,EAIjB,aAAaZ,OAAO,CAACkB,aAAR,CAAsBV,eAAtB,EAAuC;AACrDa,IAAAA,KAAK,EAAE,QAD8C;AAErDC,IAAAA,OAAO,EAAER;AAF4C,GAAvC,CAJI,EAOhBJ,QAPgB,CAApB;AAQD,CAzBD;;AA2BA,SAASD,kBAAT","sourcesContent":["import React$1, { useState, useCallback, useEffect } from 'react';\nimport debounce$1 from 'lodash/debounce';\nimport { MediaQueryContext } from '../../utilities/media-query/context.js';\nimport { navigationBarCollapsed } from '../../utilities/breakpoints.js';\nimport { EventListener as EventListener$1 } from '../EventListener/EventListener.js';\n\nconst MediaQueryProvider = function MediaQueryProvider({\n  children\n}) {\n  const [isNavigationCollapsed, setIsNavigationCollapsed] = useState(navigationBarCollapsed().matches); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const handleResize = useCallback(debounce$1(() => {\n    if (isNavigationCollapsed !== navigationBarCollapsed().matches) {\n      setIsNavigationCollapsed(!isNavigationCollapsed);\n    }\n  }, 40, {\n    trailing: true,\n    leading: true,\n    maxWait: 40\n  }), [isNavigationCollapsed]);\n  useEffect(() => {\n    setIsNavigationCollapsed(navigationBarCollapsed().matches);\n  }, []);\n  return /*#__PURE__*/React$1.createElement(MediaQueryContext.Provider, {\n    value: {\n      isNavigationCollapsed\n    }\n  }, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"resize\",\n    handler: handleResize\n  }), children);\n};\n\nexport { MediaQueryProvider };\n"]},"metadata":{},"sourceType":"module"}