{"ast":null,"code":"import { clamp as clamp$1 } from './clamp.js';\nimport { roundNumberToDecimalPlaces as roundNumberToDecimalPlaces$1 } from './roundNumberToDecimalPlaces.js';\n\nfunction rgbString(color) {\n  var red = color.red,\n      green = color.green,\n      blue = color.blue;\n\n  if ('alpha' in color) {\n    return \"rgba(\".concat(red, \", \").concat(green, \", \").concat(blue, \", \").concat(color.alpha, \")\");\n  } else {\n    return \"rgb(\".concat(red, \", \").concat(green, \", \").concat(blue, \")\");\n  }\n}\n\nvar rgbaString = rgbString;\n\nfunction rgbToHex(_ref) {\n  var red = _ref.red,\n      green = _ref.green,\n      blue = _ref.blue;\n  return \"#\".concat(componentToHex(red)).concat(componentToHex(green)).concat(componentToHex(blue));\n}\n\nfunction componentToHex(component) {\n  var hex = component.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n\nfunction hsbToHex(color) {\n  return rgbToHex(hsbToRgb(color));\n}\n\nfunction rgbFromHueAndChroma(hue, chroma) {\n  var huePrime = hue / 60;\n  var hueDelta = 1 - Math.abs(huePrime % 2 - 1);\n  var intermediateValue = chroma * hueDelta;\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n\n  if (huePrime >= 0 && huePrime <= 1) {\n    red = chroma;\n    green = intermediateValue;\n    blue = 0;\n  }\n\n  if (huePrime >= 1 && huePrime <= 2) {\n    red = intermediateValue;\n    green = chroma;\n    blue = 0;\n  }\n\n  if (huePrime >= 2 && huePrime <= 3) {\n    red = 0;\n    green = chroma;\n    blue = intermediateValue;\n  }\n\n  if (huePrime >= 3 && huePrime <= 4) {\n    red = 0;\n    green = intermediateValue;\n    blue = chroma;\n  }\n\n  if (huePrime >= 4 && huePrime <= 5) {\n    red = intermediateValue;\n    green = 0;\n    blue = chroma;\n  }\n\n  if (huePrime >= 5 && huePrime <= 6) {\n    red = chroma;\n    green = 0;\n    blue = intermediateValue;\n  }\n\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\nfunction hsbToRgb(color) {\n  var hue = color.hue,\n      saturation = color.saturation,\n      brightness = color.brightness,\n      _color$alpha = color.alpha,\n      alpha = _color$alpha === void 0 ? 1 : _color$alpha;\n  var chroma = brightness * saturation;\n\n  var _rgbFromHueAndChroma = rgbFromHueAndChroma(hue, chroma),\n      red = _rgbFromHueAndChroma.red,\n      green = _rgbFromHueAndChroma.green,\n      blue = _rgbFromHueAndChroma.blue;\n\n  var chromaBrightnessDelta = brightness - chroma;\n  red += chromaBrightnessDelta;\n  green += chromaBrightnessDelta;\n  blue += chromaBrightnessDelta;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha: alpha\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\nfunction hslToRgb(color) {\n  var hue = color.hue,\n      saturation = color.saturation,\n      lightness = color.lightness,\n      _color$alpha2 = color.alpha,\n      alpha = _color$alpha2 === void 0 ? 1 : _color$alpha2;\n  var chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);\n\n  var _rgbFromHueAndChroma2 = rgbFromHueAndChroma(hue, chroma),\n      red = _rgbFromHueAndChroma2.red,\n      green = _rgbFromHueAndChroma2.green,\n      blue = _rgbFromHueAndChroma2.blue;\n\n  var lightnessVal = lightness / 100 - chroma / 2;\n  red += lightnessVal;\n  green += lightnessVal;\n  blue += lightnessVal;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha: alpha\n  };\n} // ref https://en.wikipedia.org/wiki/HSL_and_HSV\n\n\nfunction rgbToHsbl(color) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'b';\n  var _color$alpha3 = color.alpha,\n      alpha = _color$alpha3 === void 0 ? 1 : _color$alpha3;\n  var red = color.red / 255;\n  var green = color.green / 255;\n  var blue = color.blue / 255;\n  var largestComponent = Math.max(red, green, blue);\n  var smallestComponent = Math.min(red, green, blue);\n  var delta = largestComponent - smallestComponent;\n  var lightness = (largestComponent + smallestComponent) / 2;\n  var saturation = 0;\n\n  if (largestComponent === 0) {\n    saturation = 0;\n  } else if (type === 'b') {\n    saturation = delta / largestComponent;\n  } else if (type === 'l') {\n    var baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);\n    saturation = isNaN(baseSaturation) ? 0 : baseSaturation;\n  }\n\n  var huePercentage = 0;\n\n  switch (largestComponent) {\n    case red:\n      huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n\n    case green:\n      huePercentage = (blue - red) / delta + 2;\n      break;\n\n    case blue:\n      huePercentage = (red - green) / delta + 4;\n  }\n\n  var hue = huePercentage / 6 * 360;\n  var clampedHue = clamp$1(hue, 0, 360);\n  return {\n    hue: clampedHue ? roundNumberToDecimalPlaces$1(clampedHue, 2) : 0,\n    saturation: roundNumberToDecimalPlaces$1(clamp$1(saturation, 0, 1), 4),\n    brightness: roundNumberToDecimalPlaces$1(clamp$1(largestComponent, 0, 1), 4),\n    lightness: roundNumberToDecimalPlaces$1(lightness, 4),\n    alpha: roundNumberToDecimalPlaces$1(alpha, 4)\n  };\n}\n\nfunction rgbToHsb(color) {\n  var _rgbToHsbl = rgbToHsbl(color, 'b'),\n      hue = _rgbToHsbl.hue,\n      saturation = _rgbToHsbl.saturation,\n      brightness = _rgbToHsbl.brightness,\n      _rgbToHsbl$alpha = _rgbToHsbl.alpha,\n      alpha = _rgbToHsbl$alpha === void 0 ? 1 : _rgbToHsbl$alpha;\n\n  return {\n    hue: hue,\n    saturation: saturation,\n    brightness: brightness,\n    alpha: alpha\n  };\n}\n\nfunction rgbToHsl(color) {\n  var _rgbToHsbl2 = rgbToHsbl(color, 'l'),\n      hue = _rgbToHsbl2.hue,\n      rawSaturation = _rgbToHsbl2.saturation,\n      rawLightness = _rgbToHsbl2.lightness,\n      _rgbToHsbl2$alpha = _rgbToHsbl2.alpha,\n      alpha = _rgbToHsbl2$alpha === void 0 ? 1 : _rgbToHsbl2$alpha;\n\n  var saturation = roundNumberToDecimalPlaces$1(rawSaturation * 100, 2);\n  var lightness = roundNumberToDecimalPlaces$1(rawLightness * 100, 2);\n  return {\n    hue: hue,\n    saturation: saturation,\n    lightness: lightness,\n    alpha: alpha\n  };\n}\n\nexport { hsbToHex, hsbToRgb, hslToRgb, rgbString, rgbToHex, rgbToHsb, rgbToHsl, rgbaString };","map":{"version":3,"sources":["/home/hoangdev/Desktop/front.test/node_modules/@shopify/polaris/dist/esm/utilities/color-transformers.js"],"names":["clamp","clamp$1","roundNumberToDecimalPlaces","roundNumberToDecimalPlaces$1","rgbString","color","red","green","blue","alpha","rgbaString","rgbToHex","componentToHex","component","hex","toString","length","hsbToHex","hsbToRgb","rgbFromHueAndChroma","hue","chroma","huePrime","hueDelta","Math","abs","intermediateValue","saturation","brightness","chromaBrightnessDelta","round","hslToRgb","lightness","lightnessVal","rgbToHsbl","type","largestComponent","max","smallestComponent","min","delta","baseSaturation","isNaN","huePercentage","clampedHue","rgbToHsb","rgbToHsl","rawSaturation","rawLightness"],"mappings":"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","sourcesContent":["import { clamp as clamp$1 } from './clamp.js';\nimport { roundNumberToDecimalPlaces as roundNumberToDecimalPlaces$1 } from './roundNumberToDecimalPlaces.js';\n\nfunction rgbString(color) {\n  const {\n    red,\n    green,\n    blue\n  } = color;\n\n  if ('alpha' in color) {\n    return `rgba(${red}, ${green}, ${blue}, ${color.alpha})`;\n  } else {\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n}\nconst rgbaString = rgbString;\nfunction rgbToHex({\n  red,\n  green,\n  blue\n}) {\n  return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;\n}\n\nfunction componentToHex(component) {\n  const hex = component.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\nfunction hsbToHex(color) {\n  return rgbToHex(hsbToRgb(color));\n}\n\nfunction rgbFromHueAndChroma(hue, chroma) {\n  const huePrime = hue / 60;\n  const hueDelta = 1 - Math.abs(huePrime % 2 - 1);\n  const intermediateValue = chroma * hueDelta;\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime <= 1) {\n    red = chroma;\n    green = intermediateValue;\n    blue = 0;\n  }\n\n  if (huePrime >= 1 && huePrime <= 2) {\n    red = intermediateValue;\n    green = chroma;\n    blue = 0;\n  }\n\n  if (huePrime >= 2 && huePrime <= 3) {\n    red = 0;\n    green = chroma;\n    blue = intermediateValue;\n  }\n\n  if (huePrime >= 3 && huePrime <= 4) {\n    red = 0;\n    green = intermediateValue;\n    blue = chroma;\n  }\n\n  if (huePrime >= 4 && huePrime <= 5) {\n    red = intermediateValue;\n    green = 0;\n    blue = chroma;\n  }\n\n  if (huePrime >= 5 && huePrime <= 6) {\n    red = chroma;\n    green = 0;\n    blue = intermediateValue;\n  }\n\n  return {\n    red,\n    green,\n    blue\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\nfunction hsbToRgb(color) {\n  const {\n    hue,\n    saturation,\n    brightness,\n    alpha = 1\n  } = color;\n  const chroma = brightness * saturation;\n  let {\n    red,\n    green,\n    blue\n  } = rgbFromHueAndChroma(hue, chroma);\n  const chromaBrightnessDelta = brightness - chroma;\n  red += chromaBrightnessDelta;\n  green += chromaBrightnessDelta;\n  blue += chromaBrightnessDelta;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\nfunction hslToRgb(color) {\n  const {\n    hue,\n    saturation,\n    lightness,\n    alpha = 1\n  } = color;\n  const chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);\n  let {\n    red,\n    green,\n    blue\n  } = rgbFromHueAndChroma(hue, chroma);\n  const lightnessVal = lightness / 100 - chroma / 2;\n  red += lightnessVal;\n  green += lightnessVal;\n  blue += lightnessVal;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n} // ref https://en.wikipedia.org/wiki/HSL_and_HSV\n\nfunction rgbToHsbl(color, type = 'b') {\n  const {\n    alpha = 1\n  } = color;\n  const red = color.red / 255;\n  const green = color.green / 255;\n  const blue = color.blue / 255;\n  const largestComponent = Math.max(red, green, blue);\n  const smallestComponent = Math.min(red, green, blue);\n  const delta = largestComponent - smallestComponent;\n  const lightness = (largestComponent + smallestComponent) / 2;\n  let saturation = 0;\n\n  if (largestComponent === 0) {\n    saturation = 0;\n  } else if (type === 'b') {\n    saturation = delta / largestComponent;\n  } else if (type === 'l') {\n    const baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);\n    saturation = isNaN(baseSaturation) ? 0 : baseSaturation;\n  }\n\n  let huePercentage = 0;\n\n  switch (largestComponent) {\n    case red:\n      huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n\n    case green:\n      huePercentage = (blue - red) / delta + 2;\n      break;\n\n    case blue:\n      huePercentage = (red - green) / delta + 4;\n  }\n\n  const hue = huePercentage / 6 * 360;\n  const clampedHue = clamp$1(hue, 0, 360);\n  return {\n    hue: clampedHue ? roundNumberToDecimalPlaces$1(clampedHue, 2) : 0,\n    saturation: roundNumberToDecimalPlaces$1(clamp$1(saturation, 0, 1), 4),\n    brightness: roundNumberToDecimalPlaces$1(clamp$1(largestComponent, 0, 1), 4),\n    lightness: roundNumberToDecimalPlaces$1(lightness, 4),\n    alpha: roundNumberToDecimalPlaces$1(alpha, 4)\n  };\n}\n\nfunction rgbToHsb(color) {\n  const {\n    hue,\n    saturation,\n    brightness,\n    alpha = 1\n  } = rgbToHsbl(color, 'b');\n  return {\n    hue,\n    saturation,\n    brightness,\n    alpha\n  };\n}\nfunction rgbToHsl(color) {\n  const {\n    hue,\n    saturation: rawSaturation,\n    lightness: rawLightness,\n    alpha = 1\n  } = rgbToHsbl(color, 'l');\n  const saturation = roundNumberToDecimalPlaces$1(rawSaturation * 100, 2);\n  const lightness = roundNumberToDecimalPlaces$1(rawLightness * 100, 2);\n  return {\n    hue,\n    saturation,\n    lightness,\n    alpha\n  };\n}\n\nexport { hsbToHex, hsbToRgb, hslToRgb, rgbString, rgbToHex, rgbToHsb, rgbToHsl, rgbaString };\n"]},"metadata":{},"sourceType":"module"}