{"ast":null,"code":"import _classCallCheck from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/hoangdev/Desktop/front.test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport React$1, { PureComponent } from 'react';\nimport { EventListener as EventListener$1 } from '../../../EventListener/EventListener.js';\nimport { isServer } from '../../../../utilities/target.js';\nimport styles from '../../ColorPicker.scss.js';\nvar isDragging = false; // Required to solve a bug causing the underlying page/container to scroll\n// while trying to drag the ColorPicker controls.\n// This must be called as soon as possible to properly prevent the event.\n// `passive: false` must also be set, as it seems webkit has changed the \"default\" behaviour\n// https://bugs.webkit.org/show_bug.cgi?id=182521\n\nif (!isServer) {\n  window.addEventListener('touchmove', function (event) {\n    if (!isDragging) {\n      return;\n    }\n\n    event.preventDefault();\n  }, {\n    passive: false\n  });\n}\n\nvar Slidable = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Slidable, _PureComponent);\n\n  var _super = _createSuper(Slidable);\n\n  function Slidable() {\n    var _this;\n\n    _classCallCheck(this, Slidable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      dragging: false\n    };\n    _this.node = null;\n    _this.draggerNode = null;\n\n    _this.setDraggerNode = function (node) {\n      _this.draggerNode = node;\n    };\n\n    _this.setNode = function (node) {\n      _this.node = node;\n    };\n\n    _this.startDrag = function (event) {\n      if (isMouseDownEvent(event)) {\n        _this.handleDraggerMove(event.clientX, event.clientY);\n      }\n\n      isDragging = true;\n\n      _this.setState({\n        dragging: true\n      });\n    };\n\n    _this.handleDragEnd = function () {\n      isDragging = false;\n\n      _this.setState({\n        dragging: false\n      });\n    };\n\n    _this.handleMove = function (event) {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      if (isMouseMoveEvent(event)) {\n        _this.handleDraggerMove(event.clientX, event.clientY);\n\n        return;\n      }\n\n      _this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);\n    };\n\n    _this.handleDraggerMove = function (x, y) {\n      if (_this.node == null) {\n        return;\n      }\n\n      var onChange = _this.props.onChange;\n\n      var rect = _this.node.getBoundingClientRect();\n\n      var offsetX = x - rect.left;\n      var offsetY = y - rect.top;\n      onChange({\n        x: offsetX,\n        y: offsetY\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Slidable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onDraggerHeight = this.props.onDraggerHeight;\n\n      if (onDraggerHeight == null) {\n        return;\n      }\n\n      var draggerNode = this.draggerNode;\n\n      if (draggerNode == null) {\n        return;\n      }\n\n      onDraggerHeight(draggerNode.clientWidth);\n\n      if (process.env.NODE_ENV === 'development') {\n        setTimeout(function () {\n          onDraggerHeight(draggerNode.clientWidth);\n        }, 0);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dragging = this.state.dragging;\n      var _this$props = this.props,\n          _this$props$draggerX = _this$props.draggerX,\n          draggerX = _this$props$draggerX === void 0 ? 0 : _this$props$draggerX,\n          _this$props$draggerY = _this$props.draggerY,\n          draggerY = _this$props$draggerY === void 0 ? 0 : _this$props$draggerY;\n      var draggerPositioning = {\n        transform: \"translate3d(\".concat(draggerX, \"px, \").concat(draggerY, \"px, 0)\")\n      };\n      var moveListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n        event: \"mousemove\",\n        handler: this.handleMove,\n        passive: false\n      }) : null;\n      var touchMoveListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n        event: \"touchmove\",\n        handler: this.handleMove,\n        passive: false\n      }) : null;\n      var endDragListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n        event: \"mouseup\",\n        handler: this.handleDragEnd\n      }) : null;\n      var touchEndListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n        event: \"touchend\",\n        handler: this.handleDragEnd\n      }) : null;\n      var touchCancelListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n        event: \"touchcancel\",\n        handler: this.handleDragEnd\n      }) : null;\n      return /*#__PURE__*/React$1.createElement(\"div\", {\n        ref: this.setNode,\n        className: styles.Slidable,\n        onMouseDown: this.startDrag,\n        onTouchStart: this.startDrag\n      }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /*#__PURE__*/React$1.createElement(\"div\", {\n        style: draggerPositioning,\n        className: styles.Dragger,\n        ref: this.setDraggerNode\n      }));\n    }\n  }]);\n\n  return Slidable;\n}(PureComponent);\n\nfunction isMouseMoveEvent(event) {\n  return event.type === 'mousemove';\n}\n\nfunction isMouseDownEvent(event) {\n  return event.type === 'mousedown';\n}\n\nexport { Slidable };","map":{"version":3,"sources":["/home/hoangdev/Desktop/front.test/node_modules/@shopify/polaris/dist/esm/components/ColorPicker/components/Slidable/Slidable.js"],"names":["React$1","PureComponent","EventListener","EventListener$1","isServer","styles","isDragging","window","addEventListener","event","preventDefault","passive","Slidable","args","state","dragging","node","draggerNode","setDraggerNode","setNode","startDrag","isMouseDownEvent","handleDraggerMove","clientX","clientY","setState","handleDragEnd","handleMove","stopImmediatePropagation","stopPropagation","cancelable","isMouseMoveEvent","touches","x","y","onChange","props","rect","getBoundingClientRect","offsetX","left","offsetY","top","onDraggerHeight","clientWidth","process","env","NODE_ENV","setTimeout","draggerX","draggerY","draggerPositioning","transform","moveListener","createElement","handler","touchMoveListener","endDragListener","touchEndListener","touchCancelListener","ref","className","onMouseDown","onTouchStart","style","Dragger","type"],"mappings":"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","sourcesContent":["import React$1, { PureComponent } from 'react';\nimport { EventListener as EventListener$1 } from '../../../EventListener/EventListener.js';\nimport { isServer } from '../../../../utilities/target.js';\nimport styles from '../../ColorPicker.scss.js';\n\nlet isDragging = false; // Required to solve a bug causing the underlying page/container to scroll\n// while trying to drag the ColorPicker controls.\n// This must be called as soon as possible to properly prevent the event.\n// `passive: false` must also be set, as it seems webkit has changed the \"default\" behaviour\n// https://bugs.webkit.org/show_bug.cgi?id=182521\n\nif (!isServer) {\n  window.addEventListener('touchmove', event => {\n    if (!isDragging) {\n      return;\n    }\n\n    event.preventDefault();\n  }, {\n    passive: false\n  });\n}\n\nclass Slidable extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dragging: false\n    };\n    this.node = null;\n    this.draggerNode = null;\n\n    this.setDraggerNode = node => {\n      this.draggerNode = node;\n    };\n\n    this.setNode = node => {\n      this.node = node;\n    };\n\n    this.startDrag = event => {\n      if (isMouseDownEvent(event)) {\n        this.handleDraggerMove(event.clientX, event.clientY);\n      }\n\n      isDragging = true;\n      this.setState({\n        dragging: true\n      });\n    };\n\n    this.handleDragEnd = () => {\n      isDragging = false;\n      this.setState({\n        dragging: false\n      });\n    };\n\n    this.handleMove = event => {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      if (isMouseMoveEvent(event)) {\n        this.handleDraggerMove(event.clientX, event.clientY);\n        return;\n      }\n\n      this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);\n    };\n\n    this.handleDraggerMove = (x, y) => {\n      if (this.node == null) {\n        return;\n      }\n\n      const {\n        onChange\n      } = this.props;\n      const rect = this.node.getBoundingClientRect();\n      const offsetX = x - rect.left;\n      const offsetY = y - rect.top;\n      onChange({\n        x: offsetX,\n        y: offsetY\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      onDraggerHeight\n    } = this.props;\n\n    if (onDraggerHeight == null) {\n      return;\n    }\n\n    const {\n      draggerNode\n    } = this;\n\n    if (draggerNode == null) {\n      return;\n    }\n\n    onDraggerHeight(draggerNode.clientWidth);\n\n    if (process.env.NODE_ENV === 'development') {\n      setTimeout(() => {\n        onDraggerHeight(draggerNode.clientWidth);\n      }, 0);\n    }\n  }\n\n  render() {\n    const {\n      dragging\n    } = this.state;\n    const {\n      draggerX = 0,\n      draggerY = 0\n    } = this.props;\n    const draggerPositioning = {\n      transform: `translate3d(${draggerX}px, ${draggerY}px, 0)`\n    };\n    const moveListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n      event: \"mousemove\",\n      handler: this.handleMove,\n      passive: false\n    }) : null;\n    const touchMoveListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n      event: \"touchmove\",\n      handler: this.handleMove,\n      passive: false\n    }) : null;\n    const endDragListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n      event: \"mouseup\",\n      handler: this.handleDragEnd\n    }) : null;\n    const touchEndListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n      event: \"touchend\",\n      handler: this.handleDragEnd\n    }) : null;\n    const touchCancelListener = dragging ? /*#__PURE__*/React$1.createElement(EventListener$1, {\n      event: \"touchcancel\",\n      handler: this.handleDragEnd\n    }) : null;\n    return /*#__PURE__*/React$1.createElement(\"div\", {\n      ref: this.setNode,\n      className: styles.Slidable,\n      onMouseDown: this.startDrag,\n      onTouchStart: this.startDrag\n    }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /*#__PURE__*/React$1.createElement(\"div\", {\n      style: draggerPositioning,\n      className: styles.Dragger,\n      ref: this.setDraggerNode\n    }));\n  }\n\n}\n\nfunction isMouseMoveEvent(event) {\n  return event.type === 'mousemove';\n}\n\nfunction isMouseDownEvent(event) {\n  return event.type === 'mousedown';\n}\n\nexport { Slidable };\n"]},"metadata":{},"sourceType":"module"}